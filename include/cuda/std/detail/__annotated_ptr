/*
 * Copyright 1993-2019 NVIDIA Corporation.  All rights reserved.
 *
 * NOTICE TO LICENSEE:
 *
 * This source code and/or documentation ("Licensed Deliverables") are
 * subject to NVIDIA intellectual property rights under U.S. and
 * international Copyright laws.
 *
 * These Licensed Deliverables contained herein is PROPRIETARY and
 * CONFIDENTIAL to NVIDIA and is being provided under the terms and
 * conditions of a form of NVIDIA software license agreement by and
 * between NVIDIA and Licensee ("License Agreement") or electronically
 * accepted by Licensee.  Notwithstanding any terms or conditions to
 * the contrary in the License Agreement, reproduction or disclosure
 * of the Licensed Deliverables to any third party without the express
 * written consent of NVIDIA is prohibited.
 *
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE
 * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  IT IS
 * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.
 * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED
 * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
 * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY
 * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THESE LICENSED DELIVERABLES.
 *
 * U.S. Government End Users.  These Licensed Deliverables are a
 * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT
 * 1995), consisting of "commercial computer software" and "commercial
 * computer software documentation" as such terms are used in 48
 * C.F.R. 12.212 (SEPT 1995) and is provided to the U.S. Government
 * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and
 * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all
 * U.S. Government End Users acquire the Licensed Deliverables with
 * only those rights set forth herein.
 *
 * Any use of the Licensed Deliverables in individual and commercial
 * software must include, in the user documentation and internal
 * comments to the code, the above Disclaimer and U.S. Government End
 * Users Notice.
 */

_LIBCUDACXX_BEGIN_NAMESPACE_CUDA

namespace __detail_ap {

  template <typename _Property>
  __device__
  void* __associate_address_space(void* __ptr, _Property __prop) {
    if (std::is_same<_Property, access_property::shared>::value == true) {
      bool __b = __isShared(__ptr);
#if _LIBCUDACXX_DEBUG_LEVEL >= 2
      _LIBCUDACXX_DEBUG_ASSERT(__b == true);
#endif
      __builtin_assume(__b);
    } else if (std::is_same<_Property, access_property::global>::value == true ||
               std::is_same<_Property, access_property::normal>::value == true ||
               std::is_same<_Property, access_property::persisting>::value == true ||
               std::is_same<_Property, access_property::streaming>::value == true ||
               std::is_same<_Property, access_property>::value) {
      bool __b = __isGlobal(__ptr);
#if _LIBCUDACXX_DEBUG_LEVEL >= 2
      _LIBCUDACXX_DEBUG_ASSERT(__b == true);
#endif
      __builtin_assume(__b);
    }

    return __ptr;
  }

  template <typename __Prop>
  __device__
  void* __associate_descriptor(void* __ptr, __Prop __prop) {
    return __associate_descriptor(__ptr, static_cast<std::uint64_t>(access_property(__prop)));
  }

  template <>
  __device__
  void* __associate_descriptor(void* __ptr, std::uint64_t __prop) {
#if __CUDA_ARCH__ >= 800
    return __nv_associate_access_property(__ptr, __prop);
#else
    return __ptr;
#endif
  }

  template<>
  __device__
  void* __associate_descriptor(void* __ptr, access_property::shared) {
    return __ptr;
  }

  template<typename _Type, typename _Property>
  __host__ __device__
  _Type* __associate(_Type* __ptr, _Property __prop) {
#ifdef __CUDA_ARCH__
    return static_cast<_Type*>(__associate_descriptor(__associate_address_space(__ptr, __prop), __prop));
#else
    return __ptr;
#endif
  }


  template<typename _Property>
  class __annotated_ptr_base {
    using __error = typename _Property::__unknown_access_property_type;
  };

  template<>
  class __annotated_ptr_base<access_property::shared> {
    protected:
      static constexpr std::uint64_t __prop = 0;

      constexpr __annotated_ptr_base() noexcept = default;
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, access_property::shared{});
      }
  };

  template<>
  class __annotated_ptr_base<access_property::global> {
    protected:
      static constexpr std::uint64_t __prop = __sm_80::__interleave_normal();

      constexpr __annotated_ptr_base() noexcept = default;
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, access_property::global{});
      }
  };

  template<>
  class __annotated_ptr_base<access_property::normal> {
    protected:
      static constexpr std::uint64_t __prop = __sm_80::__interleave_normal_demote();

      constexpr __annotated_ptr_base() noexcept = default;
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, access_property::normal{});
      }
  };

  template<>
  class __annotated_ptr_base<access_property::persisting> {
    protected:
      static constexpr std::uint64_t __prop = __sm_80::__interleave_persisting();

      constexpr __annotated_ptr_base() noexcept = default;
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, access_property::persisting{});
      }
  };

  template<>
  class __annotated_ptr_base<access_property::streaming> {
    protected:
      static constexpr std::uint64_t __prop = __sm_80::__interleave_streaming();

      constexpr __annotated_ptr_base() noexcept = default;
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, access_property::streaming{});
      }
  };

  template<>
  class __annotated_ptr_base<access_property> {
    protected:
      std::uint64_t __prop;

      __host__ __device__ constexpr __annotated_ptr_base() noexcept : __prop(access_property()) {}
      __host__ __device__ constexpr __annotated_ptr_base(std::uint64_t __property) noexcept : __prop(__property) {}
      constexpr __annotated_ptr_base(__annotated_ptr_base const&) = default;
      __device__ void* __apply_prop(void* __p) const {
        return __associate(__p, __prop);
      }
  };
} // namespace __detail_ap

_LIBCUDACXX_END_NAMESPACE_CUDA
