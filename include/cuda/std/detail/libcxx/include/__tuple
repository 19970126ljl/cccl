// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX___TUPLE
#define _LIBCUDACXX___TUPLE

#ifndef __cuda_std__
#include <__config>
#include <cstddef>
#include <type_traits>
#include <__pragma_push>
#endif //__cuda_std__

#include "__fwd/array.h"
#include "__fwd/get.h"
#include "__fwd/tuple.h"
#include "__tuple_/apply_cv.h"
#include "__tuple_/make_tuple_types.h"
#include "__tuple_/sfinae_helpers.h"
#include "__tuple_/tuple_element.h"
#include "__tuple_/tuple_indices.h"
#include "__tuple_/tuple_like.h"
#include "__tuple_/tuple_size.h"
#include "__tuple_/tuple_types.h"
#include "__utility/integer_sequence.h"

#if defined(_LIBCUDACXX_USE_PRAGMA_GCC_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_STD
template <size_t...>
using _Ivoid_t = void;

_LIBCUDACXX_END_NAMESPACE_STD

// This is a workaround for the fact that structured bindings require that the specializations of
// `tuple_size` and `tuple_element` reside in namespace std (https://eel.is/c++draft/dcl.struct.bind#4).
// See https://github.com/NVIDIA/libcudacxx/issues/316 for a short discussion
#if _LIBCUDACXX_STD_VER > 14
namespace std {
#ifdef _LIBCUDACXX_COMPILER_NVRTC
    template <class... _Tp>
    struct tuple_size;

    template<size_t _Ip, class... _Tp>
    struct tuple_element;
#endif

    template <class... _Tp>
    struct tuple_size<_CUDA_VSTD::tuple<_Tp...>> 
      : _CUDA_VSTD::tuple_size<_CUDA_VSTD::tuple<_Tp...>> 
    {};

    template<size_t _Ip, class... _Tp>
    struct tuple_element<_Ip, _CUDA_VSTD::tuple<_Tp...>> 
      : _CUDA_VSTD::tuple_element<_Ip, _CUDA_VSTD::tuple<_Tp...>>
    {};
}
#endif // _LIBCUDACXX_STD_VER > 14

#ifndef __cuda_std__
#include <__pragma_pop>
#endif

#endif  // _LIBCUDACXX___TUPLE
