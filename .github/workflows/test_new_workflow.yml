
# This is the main workflow that runs on every PR and push to main
name: pr_split

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"

# Only runs one instance of this workflow at a time for a given PR and cancels any in-progress runs when a new one starts.
concurrency:
  group: ${{ github.workflow }}-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  compute-matrix:
    runs-on: ubuntu-latest
    outputs:
      BUILD_MATRIX:  ${{ steps.compute-matrix.outputs.BUILD_MATRIX }}
      CUDA_VERSIONS: ${{ steps.compute-matrix.outputs.CUDA_VERSIONS }}
      COMPILERS: ${{ steps.compute-matrix.outputs.COMPILERS }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Compute matrix
        id: compute-matrix
        run: |
          cat ./ci/matrix.yaml
          BUILD_MATRIX=$(yq -o=json ./ci/matrix.yaml | jq -c '[.include[] | . as $o | {std: .std[]} + del($o.std)]' )
          echo "BUILD_MATRIX=$BUILD_MATRIX" | tee -a "$GITHUB_OUTPUT"
          CUDA_VERSIONS=$(echo $BUILD_MATRIX | jq -c '[.[] | .cuda] | unique')
          echo "CUDA_VERSIONS=$CUDA_VERSIONS" | tee -a "$GITHUB_OUTPUT"
          COMPILERS=$(echo $BUILD_MATRIX | jq -c '[.[] | .compiler.name] | unique')
          echo "COMPILERS=$COMPILERS" | tee -a "$GITHUB_OUTPUT"
          
  thrust:
    name: Thrust CUDA ${{ matrix.cuda_version }}
    needs: compute-matrix
    uses: ./.github/workflows/per_cuda.yml
    strategy:
      matrix: 
        cuda_version: ${{ fromJSON(needs.compute-matrix.outputs.CUDA_VERSIONS) }} 
    with:
      cuda_version: ${{ matrix.cuda_version }}
      full_matrix: ${{ needs.compute-matrix.outputs.BUILD_MATRIX }}
      compilers: ${{ needs.compute-matrix.outputs.COMPILERS }}